from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
import time
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


def get_comments_count(driver):
    """Retourne le nombre actuel de commentaires principaux charg√©s"""
    try:
        divs = driver.find_elements(By.CSS_SELECTOR, "div.sc-c28ab467-3.lrona")
        return len(divs)
    except:
        return 0


def get_replies_count(driver):
    """Retourne le nombre actuel de r√©ponses charg√©es"""
    try:
        replies = driver.find_elements(By.CSS_SELECTOR, "div.sc-5be4c02d-1.fysers")
        return len(replies)
    except:
        return 0


def scroll_to_load_all_comments(driver, max_attempts=50, scroll_pause=2):
    """
    Scroll progressivement jusqu'√† charger tous les commentaires principaux

    Args:
        driver: Instance du webdriver
        max_attempts: Nombre maximum de tentatives de scroll
        scroll_pause: Temps d'attente apr√®s chaque scroll (en secondes)

    Returns:
        int: Nombre total de commentaires principaux charg√©s
    """
    previous_count = 0
    no_change_count = 0
    attempt = 0

    print("üîÑ D√©but du chargement des commentaires principaux...")

    while attempt < max_attempts:
        # Scroll jusqu'en bas de la page
        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")

        # Attendre que le contenu se charge
        time.sleep(scroll_pause)

        # Compter les commentaires actuels
        current_count = get_comments_count(driver)

        print(f"Tentative {attempt + 1}: {current_count} commentaires principaux charg√©s")

        # Si le nombre n'a pas chang√©
        if current_count == previous_count:
            no_change_count += 1
            # Si √ßa fait 3 fois qu'il n'y a pas de changement, on arr√™te
            if no_change_count >= 3:
                print("‚úÖ Tous les commentaires principaux semblent √™tre charg√©s")
                break
        else:
            no_change_count = 0

        previous_count = current_count
        attempt += 1

    if attempt >= max_attempts:
        print(f"‚ö†Ô∏è Limite de {max_attempts} tentatives atteinte")

    return current_count


def click_all_reply_buttons(driver):
    """
    Clique sur tous les boutons de r√©ponses pour afficher toutes les r√©ponses
    Utilise un set pour tracker les boutons d√©j√† cliqu√©s

    Returns:
        int: Nombre de boutons cliqu√©s
    """
    print("\nüí¨ Chargement des r√©ponses aux commentaires...")

    # Remonter en haut de la page
    driver.execute_script("window.scrollTo(0, 0);")
    time.sleep(1)

    clicked_buttons = set()  # Pour tracker les boutons d√©j√† cliqu√©s
    clicked_count = 0
    previous_replies_count = get_replies_count(driver)
    no_change_count = 0

    while no_change_count < 3:  # S'arr√™te apr√®s 3 it√©rations sans nouveau clic
        # Trouver tous les boutons de r√©ponses
        reply_buttons = driver.find_elements(By.CSS_SELECTOR, "button.sc-fabbaaec-0.dLNZIc")

        if not reply_buttons:
            print("   Aucun bouton de r√©ponse trouv√©")
            break

        buttons_clicked_this_round = 0

        for i, button in enumerate(reply_buttons):
            try:
                # Cr√©er un identifiant unique pour le bouton
                button_id = id(button)

                # Si on a d√©j√† cliqu√© sur ce bouton, on passe
                if button_id in clicked_buttons:
                    continue

                # V√©rifier si le bouton est visible et cliquable
                if button.is_displayed() and button.is_enabled():
                    # Scroll jusqu'au bouton
                    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", button)
                    time.sleep(0.3)

                    # Cliquer sur le bouton
                    button.click()
                    clicked_buttons.add(button_id)
                    clicked_count += 1
                    buttons_clicked_this_round += 1
                    time.sleep(0.5)
            except Exception as e:
                continue

        print(f"   ‚Üí {buttons_clicked_this_round} nouveau(x) bouton(s) cliqu√©(s) (total: {clicked_count})")

        # V√©rifier si le nombre de r√©ponses a chang√©
        time.sleep(1)
        current_replies_count = get_replies_count(driver)

        if current_replies_count == previous_replies_count and buttons_clicked_this_round == 0:
            no_change_count += 1
        else:
            no_change_count = 0

        previous_replies_count = current_replies_count

        # Si aucun nouveau bouton cliqu√©, on arr√™te
        if buttons_clicked_this_round == 0:
            no_change_count += 1

    return clicked_count


if __name__ == '__main__':
    comments_url = "https://www.20min.ch/fr/comment/103433427"

    # Options du navigateur
    options = Options()
    # options.add_argument("--headless")  # Optionnel : sans interface graphique
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--window-size=1920,1080")

    # Ajout de headers r√©alistes et d√©sactivation de la d√©tection Selenium
    options.add_argument(
        "user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_experimental_option('useAutomationExtension', False)

    # D√©marrage du navigateur
    driver = webdriver.Chrome(options=options)

    try:
        driver.get(comments_url)
        print("üìÑ Page charg√©e, attente initiale...")
        time.sleep(5)

        # √âTAPE 1 : Scroll et chargement de tous les commentaires principaux
        comments_count = scroll_to_load_all_comments(driver, max_attempts=50, scroll_pause=2)
        print(f"\n‚úÖ {comments_count} commentaires principaux charg√©s")

        # √âTAPE 2 : Cliquer sur tous les boutons de r√©ponses
        buttons_clicked = click_all_reply_buttons(driver)
        print(f"\n‚úÖ {buttons_clicked} bouton(s) de r√©ponses cliqu√©(s)")

        # √âTAPE 3 : Compter le total final
        time.sleep(2)

        final_comments = get_comments_count(driver)
        final_replies = get_replies_count(driver)
        total = final_comments + final_replies

        print(f"\n‚ú® R√©sultat final :")
        print(f"   üìù Commentaires principaux : {final_comments}")
        print(f"   üí¨ R√©ponses : {final_replies}")
        print(f"   üìä TOTAL : {total}")

    finally:
        # Fermer le navigateur
        driver.quit()